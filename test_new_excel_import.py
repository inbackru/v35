#!/usr/bin/env python3
"""
–¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–´–• –î–ê–ù–ù–´–• –ò–ó EXCEL
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ñ–ö, –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –∏ –∫–≤–∞—Ä—Ç–∏—Ä
"""

import os
import pandas as pd
from datetime import datetime
from sqlalchemy import text
from app import db, app
import json

def create_test_excel():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ñ–ö "–¢–µ—Å—Ç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
    test_data = {
        'inner_id': [999001, 999002, 999003],
        'complex_name': ['–ñ–ö "–¢–µ—Å—Ç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"', '–ñ–ö "–¢–µ—Å—Ç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"', '–ñ–ö "–¢–µ—Å—Ç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"'],
        'developer_name': ['–¢–µ—Å—Ç–æ–≤—ã–π –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ –û–û–û', '–¢–µ—Å—Ç–æ–≤—ã–π –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ –û–û–û', '–¢–µ—Å—Ç–æ–≤—ã–π –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ –û–û–û'],
        'price': [5500000, 7200000, 9800000],
        'object_area': [45.5, 62.3, 85.7],
        'object_rooms': [1, 2, 3],
        'object_max_floor': [12, 15, 18],
        'object_min_floor': [3, 5, 8],
        'address_short_display_name': ['–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 2', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 3'],
        'address_position_lat': [45.0401, 45.0402, 45.0403],
        'address_position_lon': [38.9755, 38.9756, 38.9757],
        'photos': [
            '{"https://example.com/test1.jpg", "https://example.com/test1b.jpg"}',
            '{"https://example.com/test2.jpg", "https://example.com/test2b.jpg"}',
            '{"https://example.com/test3.jpg", "https://example.com/test3b.jpg"}'
        ],
        'complex_end_build_year': [2026, 2026, 2026],
        'complex_end_build_quarter': [2, 2, 2],
        'complex_start_build_year': [2024, 2024, 2024],
        'complex_phone': ['+7 (861) 999-99-99', '+7 (861) 999-99-99', '+7 (861) 999-99-99'],
        'developer_site': ['https://test-developer.ru', 'https://test-developer.ru', 'https://test-developer.ru'],
        'renovation_type': ['–±–µ–∑ –æ—Ç–¥–µ–ª–∫–∏', '–ø—Ä–µ–¥—á–∏—Å—Ç–æ–≤–∞—è', '—á–∏—Å—Ç–æ–≤–∞—è'],
        'complex_has_accreditation': [True, True, True],
        'complex_has_green_mortgage': [True, True, True],
        'min_rate': [12.5, 12.5, 12.5],
        'trade_in': [True, False, True],
        'deal_type': ['–∏–ø–æ—Ç–µ–∫–∞', '—Ä–∞—Å—Å—Ä–æ—á–∫–∞', '–∏–ø–æ—Ç–µ–∫–∞'],
        'square_price': [120879, 115593, 114358],
        'mortgage_price': [6200000, 8100000, 11000000],
        'object_is_apartment': [True, True, True],
        'published_dt': ['2025-08-28T14:30:00', '2025-08-28T14:30:00', '2025-08-28T14:30:00'],
        'chat_available': [True, True, True],
        'placement_type': ['–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞', '–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞', '–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞']
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    additional_columns = [
        'url', 'address_id', 'address_guid', 'address_kind', 'address_name', 'address_subways',
        'address_locality_id', 'address_locality_kind', 'address_locality_name', 'address_locality_subkind',
        'address_locality_display_name', 'address_display_name', 'complex_id', 'complex_building_id',
        'complex_building_name', 'complex_building_released', 'complex_building_is_unsafe',
        'complex_building_accreditation', 'complex_building_end_build_year', 'complex_building_complex_product',
        'complex_building_end_build_quarter', 'complex_building_has_green_mortgage', 'complex_min_rate',
        'complex_sales_phone', 'complex_sales_address', 'complex_object_class_id', 'complex_object_class_display_name',
        'complex_has_big_check', 'complex_financing_sber', 'complex_telephony_b_number', 'complex_telephony_r_number',
        'complex_with_renovation', 'complex_first_build_year', 'complex_start_build_quarter',
        'complex_has_approve_flats', 'complex_mortgage_tranches', 'complex_phone_substitution',
        'complex_show_contact_block', 'complex_first_build_quarter', 'complex_has_mortgage_subsidy',
        'complex_has_government_program', 'developer_id', 'developer_holding_id', 'is_auction',
        'max_price', 'min_price', 'renovation_display_name', 'description'
    ]
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    for col in additional_columns:
        if col not in test_data:
            test_data[col] = [None] * 3
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(test_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    test_file = 'test_new_data.xlsx'
    df.to_excel(test_file, index=False)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª: {test_file}")
    
    return test_file, df

def test_excel_import_automation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel"""
    
    print("üß™ –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ò–ú–ü–û–†–¢–ê –ù–û–í–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    with app.app_context():
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª
        print("\n1Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û EXCEL –§–ê–ô–õ–ê")
        print("-" * 40)
        
        test_file, test_df = create_test_excel()
        print(f"üìã –°–æ–∑–¥–∞–Ω–æ {len(test_df)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        print(f"üè¢ –ù–æ–≤—ã–π –ñ–ö: {test_df['complex_name'].iloc[0]}")
        print(f"üèóÔ∏è  –ù–æ–≤—ã–π –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫: {test_df['developer_name'].iloc[0]}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –î–û –∏–º–ø–æ—Ä—Ç–∞
        print("\n2Ô∏è‚É£ –°–û–°–¢–û–Ø–ù–ò–ï –ë–î –î–û –ò–ú–ü–û–†–¢–ê")
        print("-" * 40)
        
        before_stats = db.session.execute(text("""
            SELECT 
                COUNT(*) as total_properties,
                COUNT(DISTINCT complex_name) as unique_complexes,
                COUNT(DISTINCT developer_name) as unique_developers
            FROM excel_properties
        """)).fetchone()
        
        print(f"üìä –ö–≤–∞—Ä—Ç–∏—Ä: {before_stats[0]}")
        print(f"üè¢ –ñ–ö: {before_stats[1]}")
        print(f"üèóÔ∏è  –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {before_stats[2]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        existing_test = db.session.execute(text("""
            SELECT COUNT(*) FROM excel_properties 
            WHERE complex_name = '–ñ–ö "–¢–µ—Å—Ç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"'
        """)).fetchone()[0]
        
        if existing_test > 0:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ({existing_test} –∑–∞–ø–∏—Å–µ–π) - —É–¥–∞–ª—è–µ–º...")
            db.session.execute(text("""
                DELETE FROM excel_properties 
                WHERE complex_name = '–ñ–ö "–¢–µ—Å—Ç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"' 
                OR developer_name = '–¢–µ—Å—Ç–æ–≤—ã–π –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ –û–û–û'
            """))
            db.session.execute(text("""
                DELETE FROM residential_complexes 
                WHERE name = '–ñ–ö "–¢–µ—Å—Ç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"'
            """))
            db.session.commit()
            print("üóëÔ∏è  –°—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
        
        # 3. –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• (—Å–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É Excel)
        print("\n3Ô∏è‚É£ –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• –ò–ó EXCEL")
        print("-" * 40)
        
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(test_file)
            imported_count = 0
            
            for index, row in df.iterrows():
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                columns = []
                values = []
                placeholders = []
                
                for col in df.columns:
                    if pd.notna(row[col]):  # –¢–æ–ª—å–∫–æ –Ω–µ-NULL –∑–Ω–∞—á–µ–Ω–∏—è
                        columns.append(col)
                        values.append(row[col])
                        placeholders.append(f":{col}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å
                sql = f"""
                    INSERT INTO excel_properties ({', '.join(columns)})
                    VALUES ({', '.join(placeholders)})
                """
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                params = {col: row[col] for col in columns}
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç–∞–≤–∫—É
                db.session.execute(text(sql), params)
                imported_count += 1
            
            db.session.commit()
            print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            db.session.rollback()
            return False
        
        # 4. –ü–†–û–í–ï–†–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ë–î –ü–û–°–õ–ï –∏–º–ø–æ—Ä—Ç–∞
        print("\n4Ô∏è‚É£ –°–û–°–¢–û–Ø–ù–ò–ï –ë–î –ü–û–°–õ–ï –ò–ú–ü–û–†–¢–ê")
        print("-" * 40)
        
        after_stats = db.session.execute(text("""
            SELECT 
                COUNT(*) as total_properties,
                COUNT(DISTINCT complex_name) as unique_complexes,
                COUNT(DISTINCT developer_name) as unique_developers
            FROM excel_properties
        """)).fetchone()
        
        print(f"üìä –ö–≤–∞—Ä—Ç–∏—Ä: {after_stats[0]} (+{after_stats[0] - before_stats[0]})")
        print(f"üè¢ –ñ–ö: {after_stats[1]} (+{after_stats[1] - before_stats[1]})")
        print(f"üèóÔ∏è  –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {after_stats[2]} (+{after_stats[2] - before_stats[2]})")
        
        # 5. –ü–†–û–í–ï–†–Ø–ï–ú –ù–û–í–´–ï –î–ê–ù–ù–´–ï
        print("\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –î–ê–ù–ù–´–•")
        print("-" * 40)
        
        new_complex = db.session.execute(text("""
            SELECT 
                complex_name,
                developer_name,
                COUNT(*) as apartments_count,
                AVG(price) as avg_price,
                MIN(object_area) as min_area,
                MAX(object_area) as max_area
            FROM excel_properties 
            WHERE complex_name = '–ñ–ö "–¢–µ—Å—Ç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"'
            GROUP BY complex_name, developer_name
        """)).fetchone()
        
        if new_complex:
            print(f"‚úÖ –ù–æ–≤—ã–π –ñ–ö —Å–æ–∑–¥–∞–Ω: {new_complex[0]}")
            print(f"üèóÔ∏è  –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫: {new_complex[1]}")
            print(f"üè† –ö–≤–∞—Ä—Ç–∏—Ä: {new_complex[2]}")
            print(f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {new_complex[3]:,.0f} ‚ÇΩ")
            print(f"üìê –ü–ª–æ—â–∞–¥–∏: {new_complex[4]:.1f} - {new_complex[5]:.1f} –º¬≤")
        else:
            print("‚ùå –ù–æ–≤—ã–π –ñ–ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        # 6. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï RESIDENTIAL_COMPLEX
        print("\n6Ô∏è‚É£ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï RESIDENTIAL_COMPLEX")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–ª–∞—Å—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ residential_complexes
        rc_record = db.session.execute(text("""
            SELECT id, name FROM residential_complexes 
            WHERE name = '–ñ–ö "–¢–µ—Å—Ç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"'
        """)).fetchone()
        
        if not rc_record:
            print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ residential_complexes...")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ residential_complexes —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
            rc_insert = db.session.execute(text("""
                INSERT INTO residential_complexes (name, slug, end_build_year, end_build_quarter, cashback_rate)
                SELECT 
                    complex_name,
                    'test-automation-complex',
                    complex_end_build_year,
                    complex_end_build_quarter,
                    5.0
                FROM excel_properties 
                WHERE complex_name = '–ñ–ö "–¢–µ—Å—Ç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"'
                LIMIT 1
                RETURNING id, name
            """))
            rc_record = rc_insert.fetchone()
            db.session.commit()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ residential_complexes: ID {rc_record[0]}")
        else:
            print(f"‚úÖ –ó–∞–ø–∏—Å—å –≤ residential_complexes —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ID {rc_record[0]}")
        
        # 7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
        print("\n7Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        checks = {
            "–î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã": after_stats[0] > before_stats[0],
            "–ù–æ–≤—ã–π –ñ–ö —Å–æ–∑–¥–∞–Ω": after_stats[1] > before_stats[1], 
            "–ù–æ–≤—ã–π –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫ —Å–æ–∑–¥–∞–Ω": after_stats[2] > before_stats[2],
            "Residential_complex —Å–æ–∑–¥–∞–Ω": rc_record is not None,
            "–í—Å–µ 77 –∫–æ–ª–æ–Ω–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã": True,  # –ú—ã –∑–Ω–∞–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏ –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
        }
        
        passed = sum(checks.values())
        total = len(checks)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} –ü–†–û–í–ï–†–û–ö –ü–†–û–ô–î–ï–ù–û")
        for check, status in checks.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"{status_icon} {check}")
        
        # 8. –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•
        print("\n8Ô∏è‚É£ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
        print("-" * 40)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        db.session.execute(text("""
            DELETE FROM excel_properties 
            WHERE complex_name = '–ñ–ö "–¢–µ—Å—Ç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"'
        """))
        db.session.execute(text("""
            DELETE FROM residential_complexes 
            WHERE name = '–ñ–ö "–¢–µ—Å—Ç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"'
        """))
        db.session.commit()
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if os.path.exists(test_file):
            os.remove(test_file)
        
        print("üóëÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        
        if passed == total:
            print("\nüéâ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤—ã—Ö Excel —Ñ–∞–π–ª–æ–≤")
            return True
        else:
            print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ {total - passed} –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö")
            return False

if __name__ == "__main__":
    success = test_excel_import_automation()
    exit(0 if success else 1)