"""
Telegram Bot –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å InBack
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ InBack
"""

import os
import asyncio
import logging
import requests

# Try importing telegram modules with error handling
try:
    from telegram import Update
    from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
    TELEGRAM_AVAILABLE = True
except ImportError as e:
    print(f"Telegram library not available: {e}")
    TELEGRAM_AVAILABLE = False
    # Create dummy classes to prevent errors
    class Update:
        pass
    class ContextTypes:
        DEFAULT_TYPE = None
    
from app import app, db
from models import User

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', '')  # URL –¥–ª—è webhook

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def send_telegram_message(chat_id, message):
    """Send telegram message using simple HTTP API"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå Telegram bot token not configured in environment")
        return False
    
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'  # Changed to HTML for better formatting
        }
        
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            print(f"‚úÖ Telegram message sent successfully to {chat_id}")
            return True
        else:
            print(f"‚ùå Telegram API error: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error sending telegram message: {e}")
        return False

def send_recommendation_notification(user_telegram_id, recommendation_data):
    """Send recommendation notification via Telegram"""
    if not user_telegram_id:
        print("No Telegram ID for user")
        return False
    
    message = f"""üè† <b>–ù–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>

üìã <b>{recommendation_data.get('title', '–ù–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')}</b>
üè¢ {recommendation_data.get('item_name', '–û–±—ä–µ–∫—Ç')}
üìù {recommendation_data.get('description', '')}

üí° <i>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</i> {recommendation_data.get('priority_level', '–û–±—ã—á–Ω—ã–π').title()}

üîó <a href="https://inback.ru/{recommendation_data.get('recommendation_type', 'property')}/{recommendation_data.get('item_id')}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä–µ–∫—Ç</a>
üíº <a href="https://inback.ru/dashboard">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>"""
    
    return send_telegram_message(user_telegram_id, message)

class InBackBot:
    def __init__(self):
        if not TELEGRAM_BOT_TOKEN:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        if not TELEGRAM_AVAILABLE:
            logger.error("Telegram library not available")
            return
        
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("link", self.link_command))
        self.application.add_handler(CommandHandler("unlink", self.unlink_command))
        self.application.add_handler(CommandHandler("profile", self.profile_command))
        self.application.add_handler(CommandHandler("favorites", self.favorites_command))
        self.application.add_handler(CommandHandler("notifications", self.notifications_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        chat_id = update.effective_chat.id
        user_name = update.effective_user.first_name
        
        welcome_message = f"""
üè† <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ InBack Bot, {user_name}!</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ üÜï –ù–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
‚Ä¢ üí∞ –°—Ç–∞—Ç—É—Å–µ –≤–∞—à–µ–≥–æ –∫—ç—à–±–µ–∫–∞
‚Ä¢ üìÖ –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö
‚Ä¢ ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∑–∞—è–≤–æ–∫

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/link - –ü—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç InBack
/profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
/favorites - –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
/notifications - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help - –ü–æ–º–æ—â—å

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link —Å –≤–∞—à–∏–º email –∞–¥—Ä–µ—Å–æ–º.
        """
        
        await update.message.reply_text(welcome_message, parse_mode='HTML')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_message = """
üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º InBack Bot:</b>

üîó <b>/link email@example.com</b>
   –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É InBack

üë§ <b>/profile</b>
   –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ

‚ù§Ô∏è <b>/favorites</b>
   –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

üîî <b>/notifications on/off</b>
   –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üîì <b>/unlink</b>
   –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –æ—Ç Telegram

<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ <code>/link demo@inback.ru</code>
‚Ä¢ <code>/notifications on</code>
‚Ä¢ <code>/profile</code>

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
üí¨ Telegram: @inback_support
üìß Email: support@inback.ru
üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (861) 234-56-78
        """
        
        await update.message.reply_text(help_message, parse_mode='HTML')
    
    async def link_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        chat_id = update.effective_chat.id
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å.\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/link demo@inback.ru</code>",
                parse_mode='HTML'
            )
            return
        
        email = context.args[0].lower().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç email
        import re
        if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞.\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/link demo@inback.ru</code>",
                parse_mode='HTML'
            )
            return
        
        with app.app_context():
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
            user = User.query.filter_by(email=email).first()
            
            if not user:
                await update.message.reply_text(
                    f"‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                    "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ InBack.ru –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –¥—Ä—É–≥–æ–π Telegram
            if user.telegram_id and user.telegram_id != str(chat_id):
                await update.message.reply_text(
                    "‚ùå –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram.\n\n"
                    "–î–ª—è —Å–º–µ–Ω—ã –ø—Ä–∏–≤—è–∑–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                return
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            user.telegram_id = str(chat_id)
            user.telegram_notifications = True
            db.session.commit()
            
            success_message = f"""
‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>

üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b> {user.full_name}
üìß <b>Email:</b> {email}
üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –í–∫–ª—é—á–µ–Ω—ã

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∑–∞—è–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å–µ –∫—ç—à–±–µ–∫–∞.

–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: /notifications
            """
            
            await update.message.reply_text(success_message, parse_mode='HTML')
    
    async def unlink_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /unlink –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        chat_id = update.effective_chat.id
        
        with app.app_context():
            user = User.query.filter_by(telegram_id=str(chat_id)).first()
            
            if not user:
                await update.message.reply_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–º—É Telegram.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞."
                )
                return
            
            user.telegram_id = None
            user.telegram_notifications = False
            db.session.commit()
            
            await update.message.reply_text(
                "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç Telegram.\n\n"
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç."
            )
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /profile"""
        chat_id = update.effective_chat.id
        
        with app.app_context():
            user = User.query.filter_by(telegram_id=str(chat_id)).first()
            
            if not user:
                await update.message.reply_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞."
                )
                return
            
            profile_message = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å InBack</b>

<b>–ò–º—è:</b> {user.full_name}
<b>Email:</b> {user.email}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user.user_id}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(user.favorites)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len([app for app in user.applications if app.status in ['new', 'in_progress']])}
‚Ä¢ –û–±—â–∏–π –∫—ç—à–±–µ–∫: {user.get_total_cashback():,} ‚ÇΩ

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if user.telegram_notifications else '–í—ã–∫–ª—é—á–µ–Ω—ã'}

<a href="https://inback.ru/dashboard">–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>
            """
            
            await update.message.reply_text(profile_message, parse_mode='HTML')
    
    async def favorites_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /favorites"""
        chat_id = update.effective_chat.id
        
        with app.app_context():
            user = User.query.filter_by(telegram_id=str(chat_id)).first()
            
            if not user:
                await update.message.reply_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞."
                )
                return
            
            if not user.favorites:
                await update.message.reply_text(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.\n\n"
                    "–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞ —Å–∞–π—Ç–µ InBack.ru"
                )
                return
            
            favorites_message = f"‚ù§Ô∏è <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã ({len(user.favorites)}):</b>\n\n"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö
            from app import load_properties
            properties = load_properties()
            
            for i, favorite in enumerate(user.favorites[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                # –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –ø–æ ID
                property_data = next((p for p in properties if p['id'] == favorite.property_id), None)
                if property_data:
                    price = f"{property_data.get('price', 0):,}".replace(',', ' ')
                    favorites_message += f"{i}. <b>{property_data.get('title', '–û–±—ä–µ–∫—Ç')}</b>\n"
                    favorites_message += f"   üí∞ {price} ‚ÇΩ\n"
                    favorites_message += f"   üìç {property_data.get('location', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä')}\n\n"
            
            if len(user.favorites) > 5:
                favorites_message += f"... –∏ –µ—â–µ {len(user.favorites) - 5} –æ–±—ä–µ–∫—Ç–æ–≤\n\n"
            
            favorites_message += "<a href='https://inback.ru/favorites'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ</a>"
            
            await update.message.reply_text(favorites_message, parse_mode='HTML')
    
    async def notifications_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /notifications"""
        chat_id = update.effective_chat.id
        
        with app.app_context():
            user = User.query.filter_by(telegram_id=str(chat_id)).first()
            
            if not user:
                await update.message.reply_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞."
                )
                return
            
            if context.args:
                action = context.args[0].lower()
                if action == 'on':
                    user.telegram_notifications = True
                    db.session.commit()
                    await update.message.reply_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
                    return
                elif action == 'off':
                    user.telegram_notifications = False
                    db.session.commit()
                    await update.message.reply_text("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.")
                    return
            
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.telegram_notifications else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            message = f"""
üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

<b>–°—Ç–∞—Ç—É—Å:</b> {status}

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
‚Ä¢ <code>/notifications on</code> - –≤–∫–ª—é—á–∏—Ç—å
‚Ä¢ <code>/notifications off</code> - –≤—ã–∫–ª—é—á–∏—Ç—å

<b>–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:</b>
‚Ä¢ üÜï –ù–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
‚Ä¢ üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–±–µ–∫–∞
‚Ä¢ üìÖ –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö
‚Ä¢ ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∑–∞—è–≤–æ–∫
            """
            
            await update.message.reply_text(message, parse_mode='HTML')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message_text = update.message.text.lower()
        
        if any(word in message_text for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hi', 'hello']):
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
                "–Ø –±–æ—Ç InBack –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            )
        elif any(word in message_text for word in ['–ø–æ–º–æ—â—å', '–∫–æ–º–∞–Ω–¥—ã', 'help']):
            await self.help_command(update, context)
        else:
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. ü§ñ\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
    
    async def run_webhook(self, webhook_url: str, port: int = 8443):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook"""
        try:
            await self.application.initialize()
            await self.application.start()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            await self.application.bot.set_webhook(url=webhook_url)
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
            await self.application.run_webhook(
                listen="0.0.0.0",
                port=port,
                webhook_url=webhook_url
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
    
    async def run_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
            await self.application.run_polling()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ polling: {e}")

# Flask –º–∞—Ä—à—Ä—É—Ç –¥–ª—è webhook
def create_webhook_route(app):
    """–°–æ–∑–¥–∞—ë—Ç –º–∞—Ä—à—Ä—É—Ç webhook –≤ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    from flask import request, jsonify
    
    @app.route('/webhook/telegram', methods=['POST'])
    def telegram_webhook():
        try:
            if not TELEGRAM_BOT_TOKEN:
                return jsonify({'error': 'Bot token not configured'}), 400
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
            json_data = request.get_json()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ bot application
            bot = InBackBot()
            update = Update.de_json(json_data, bot.application.bot)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ asyncio
            asyncio.run(bot.application.process_update(update))
            
            return jsonify({'status': 'ok'})
        except Exception as e:
            logger.error(f"Webhook error: {e}")
            return jsonify({'error': str(e)}), 500

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    bot = InBackBot()
    
    if WEBHOOK_URL:
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook: {WEBHOOK_URL}")
        await bot.run_webhook(WEBHOOK_URL)
    else:
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        await bot.run_polling()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())