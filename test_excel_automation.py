#!/usr/bin/env python3
"""
–ü–û–õ–ù–´–ô –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ó–ê–ì–†–£–ó–ö–ò EXCEL –î–ê–ù–ù–´–•
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ 77 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ñ–ö, –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –∏ –∫–≤–∞—Ä—Ç–∏—Ä
"""

import os
import sys
import pandas as pd
from datetime import datetime
from sqlalchemy import text
from app import db, app
import json

def test_excel_automation():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel"""
    
    print("üéØ –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ó–ê–ì–†–£–ó–ö–ò EXCEL –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    with app.app_context():
        # 1. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•
        print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã excel_properties
        columns_query = db.session.execute(text("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'excel_properties' 
            ORDER BY ordinal_position
        """))
        
        columns = columns_query.fetchall()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(columns)} –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ excel_properties")
        
        if len(columns) == 77:
            print("‚úÖ –í–°–ï 77 –ü–ê–†–ê–ú–ï–¢–†–û–í –ü–†–ò–°–£–¢–°–¢–í–£–Æ–¢ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!")
        else:
            print(f"‚ö†Ô∏è  –û–∂–∏–¥–∞–ª–æ—Å—å 77 –∫–æ–ª–æ–Ω–æ–∫, –Ω–∞–π–¥–µ–Ω–æ {len(columns)}")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        key_columns = ['complex_name', 'developer_name', 'price', 'object_area', 'object_rooms', 'photos']
        print("\nüîç –ö–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
        for col in columns:
            if col[0] in key_columns:
                print(f"   ‚úì {col[0]} ({col[1]})")
        
        # 2. –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–ê–ù–ù–´–•
        print("\n2Ô∏è‚É£ –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–ê–ù–ù–´–•")
        print("-" * 40)
        
        stats = db.session.execute(text("""
            SELECT 
                COUNT(*) as total_properties,
                COUNT(DISTINCT complex_name) as unique_complexes,
                COUNT(DISTINCT developer_name) as unique_developers,
                COUNT(DISTINCT object_rooms) as room_types,
                MIN(price) as min_price,
                MAX(price) as max_price,
                AVG(price) as avg_price
            FROM excel_properties 
            WHERE price IS NOT NULL
        """)).fetchone()
        
        print(f"üìä –û–±—â–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä: {stats[0]}")
        print(f"üè¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ñ–ö: {stats[1]}")
        print(f"üèóÔ∏è  –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {stats[2]}")
        print(f"üè† –¢–∏–ø–æ–≤ –∫–æ–º–Ω–∞—Ç: {stats[3]}")
        print(f"üí∞ –¶–µ–Ω—ã: –æ—Ç {stats[4]:,} –¥–æ {stats[5]:,} ‚ÇΩ (—Å—Ä–µ–¥–Ω—è—è: {stats[6]:,.0f} ‚ÇΩ)")
        
        # 3. –ü–†–û–í–ï–†–ö–ê RESIDENTIAL_COMPLEXES
        print("\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ RESIDENTIAL_COMPLEXES")
        print("-" * 40)
        
        rc_count = db.session.execute(text("SELECT COUNT(*) FROM residential_complexes")).fetchone()[0]
        print(f"üìã –ó–∞–ø–∏—Å–µ–π –≤ residential_complexes: {rc_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
        sync_check = db.session.execute(text("""
            SELECT 
                ep.complex_name,
                rc.id IS NOT NULL as has_rc_record
            FROM (SELECT DISTINCT complex_name FROM excel_properties) ep
            LEFT JOIN residential_complexes rc ON rc.name = ep.complex_name
            ORDER BY ep.complex_name
        """)).fetchall()
        
        synced_count = sum(1 for row in sync_check if row[1])
        print(f"üîó –ñ–ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å residential_complexes: {synced_count}/{len(sync_check)}")
        
        if synced_count < len(sync_check):
            print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ñ–ö –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ residential_complexes:")
            for row in sync_check:
                if not row[1]:
                    print(f"   - {row[0]}")
        
        # 4. –¢–ï–°–¢ –î–ê–ù–ù–´–• –ü–û –ó–ê–°–¢–†–û–ô–©–ò–ö–ê–ú
        print("\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –ü–û –ó–ê–°–¢–†–û–ô–©–ò–ö–ê–ú")
        print("-" * 40)
        
        developers = db.session.execute(text("""
            SELECT 
                developer_name,
                COUNT(*) as properties_count,
                COUNT(DISTINCT complex_name) as complexes_count,
                AVG(price) as avg_price
            FROM excel_properties 
            WHERE developer_name IS NOT NULL
            GROUP BY developer_name
            ORDER BY properties_count DESC
        """)).fetchall()
        
        for dev in developers:
            print(f"üèóÔ∏è  {dev[0]}: {dev[1]} –∫–≤–∞—Ä—Ç–∏—Ä –≤ {dev[2]} –ñ–ö (—Å—Ä. —Ü–µ–Ω–∞: {dev[3]:,.0f} ‚ÇΩ)")
        
        # 5. –ü–†–û–í–ï–†–ö–ê –§–û–¢–û–ì–†–ê–§–ò–ô
        print("\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –§–û–¢–û–ì–†–ê–§–ò–ô")
        print("-" * 40)
        
        photos_stats = db.session.execute(text("""
            SELECT 
                COUNT(*) as total_with_photos,
                COUNT(CASE WHEN photos IS NULL OR photos = '' THEN 1 END) as without_photos
            FROM excel_properties
        """)).fetchone()
        
        photos_percent = (photos_stats[0] - photos_stats[1]) / photos_stats[0] * 100
        print(f"üì∏ –ö–≤–∞—Ä—Ç–∏—Ä —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏: {photos_stats[0] - photos_stats[1]}/{photos_stats[0]} ({photos_percent:.1f}%)")
        
        # 6. –ü–†–û–í–ï–†–ö–ê –ì–ï–û–õ–û–ö–ê–¶–ò–ò
        print("\n6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ì–ï–û–õ–û–ö–ê–¶–ò–ò")
        print("-" * 40)
        
        geo_stats = db.session.execute(text("""
            SELECT 
                COUNT(*) as total,
                COUNT(CASE WHEN address_position_lat IS NOT NULL AND address_position_lon IS NOT NULL THEN 1 END) as with_coords
            FROM excel_properties
        """)).fetchone()
        
        geo_percent = geo_stats[1] / geo_stats[0] * 100
        print(f"üó∫Ô∏è  –ö–≤–∞—Ä—Ç–∏—Ä —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {geo_stats[1]}/{geo_stats[0]} ({geo_percent:.1f}%)")
        
        # 7. –ü–†–û–í–ï–†–ö–ê –¶–ï–ù–û–í–´–• –î–ê–ù–ù–´–•
        print("\n7Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¶–ï–ù–û–í–´–• –î–ê–ù–ù–´–•")
        print("-" * 40)
        
        price_stats = db.session.execute(text("""
            SELECT 
                object_rooms,
                COUNT(*) as count,
                AVG(price) as avg_price,
                MIN(price) as min_price,
                MAX(price) as max_price,
                AVG(object_area) as avg_area
            FROM excel_properties 
            WHERE price IS NOT NULL AND object_rooms IS NOT NULL
            GROUP BY object_rooms
            ORDER BY object_rooms
        """)).fetchall()
        
        for room in price_stats:
            if room[0]:
                print(f"üè† {int(room[0])}-–∫–æ–º–Ω: {room[1]} —à—Ç, {room[3]:,.0f}-{room[4]:,.0f} ‚ÇΩ (—Å—Ä. {room[2]:,.0f} ‚ÇΩ, {room[5]:.1f} –º¬≤)")
        
        # 8. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´
        print("\n8Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ
        from app import residential_complexes as get_complexes_route
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ä–æ—É—Ç—É
        try:
            with app.test_request_context():
                # –≠—Ç–æ—Ç –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∏—Ç —á—Ç–æ —Ä–æ—É—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫
                complexes_data = db.session.execute(text("""
                    SELECT DISTINCT complex_name, COUNT(*) as apartments
                    FROM excel_properties 
                    GROUP BY complex_name 
                    ORDER BY apartments DESC 
                    LIMIT 5
                """)).fetchall()
                
                print("üåê –¢–û–ü-5 –ñ–ö –ù–ê –°–ê–ô–¢–ï:")
                for complex_data in complexes_data:
                    print(f"   ‚úì {complex_data[0]} ({complex_data[1]} –∫–≤–∞—Ä—Ç–∏—Ä)")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ—É—Ç–æ–≤: {e}")
        
        # 9. –†–ï–ó–Æ–ú–ï
        print("\n9Ô∏è‚É£ –†–ï–ó–Æ–ú–ï –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò")
        print("=" * 60)
        
        checks = {
            "–í—Å–µ 77 –∫–æ–ª–æ–Ω–æ–∫ –≤ –ë–î": len(columns) == 77,
            "–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã": stats[0] > 0,
            "–ñ–ö —Å–æ–∑–¥–∞–Ω—ã": stats[1] > 0,
            "–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã": stats[2] > 0,
            "–¶–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã": stats[4] > 0 and stats[5] > 0,
            "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ—Å—Ç—å": photos_percent > 50,
            "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å—Ç—å": geo_percent > 50,
        }
        
        passed = sum(checks.values())
        total = len(checks)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} –ü–†–û–í–ï–†–û–ö –ü–†–û–ô–î–ï–ù–û")
        print("-" * 40)
        
        for check, status in checks.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"{status_icon} {check}")
        
        if passed == total:
            print("\nüéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢! –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê EXCEL –ù–ê–°–¢–†–û–ï–ù–ê –ö–û–†–†–ï–ö–¢–ù–û!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤—ã—Ö Excel —Ñ–∞–π–ª–æ–≤")
        else:
            print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ {total - passed} –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        
        return passed == total

if __name__ == "__main__":
    success = test_excel_automation()
    sys.exit(0 if success else 1)