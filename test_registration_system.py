#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π InBack
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API –∫–ª—é—á–µ–π
"""

import os
import sys
from app import app, db
from models import User, Manager, CallbackRequest
from email_service import send_notification

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
    try:
        with app.app_context():
            result = db.session.execute(db.text('SELECT version();')).fetchone()
            print(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω: {result[0][:50]}...")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

def test_user_registration():
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    try:
        with app.app_context():
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User(
                email="test@inback.ru",
                full_name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                phone="+7900123456"
            )
            test_user.set_password("test123")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ID
            user_id = test_user.user_id
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            if test_user.check_password("test123"):
                print("‚úÖ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è")
                return False
                
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_manager_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
    try:
        with app.app_context():
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            test_manager = Manager(
                email="manager@inback.ru",
                first_name="–¢–µ—Å—Ç",
                last_name="–ú–µ–Ω–µ–¥–∂–µ—Ä",
                phone="+7900987654"
            )
            test_manager.set_password("manager123")
            
            manager_id = test_manager.manager_id
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_id}")
            print(f"‚úÖ –ü–æ–ª–Ω–æ–µ –∏–º—è: {test_manager.full_name}")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return False

def test_callback_requests():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∑–∞—è–≤–æ–∫"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞—è–≤–æ–∫...")
    try:
        with app.app_context():
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
            test_request = CallbackRequest(
                name="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                phone="+7900555444",
                email="ivan@example.com",
                interest="–ü–æ–∫—É–ø–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã",
                budget="5-7 –º–ª–Ω —Ä—É–±",
                timing="–í –±–ª–∏–∂–∞–π—à–∏–µ 3 –º–µ—Å—è—Ü–∞"
            )
            
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {test_request.name} - {test_request.phone}")
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {test_request.status}")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        return False

def test_notification_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    try:
        # –¢–µ—Å—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API –∫–ª—é—á–µ–π (–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        result = send_notification(
            recipient_email="test@inback.ru",
            subject="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            message="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π InBack",
            notification_type="test"
        )
        
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ email
        templates_dir = "templates/emails"
        if os.path.exists(templates_dir):
            templates = [f for f in os.listdir(templates_dir) if f.endswith('.html')]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(templates)} email —à–∞–±–ª–æ–Ω–æ–≤")
        else:
            print("‚ö†Ô∏è  –ü–∞–ø–∫–∞ email —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π InBack")
    print("=" * 60)
    
    tests = [
        test_database_connection,
        test_user_registration,
        test_manager_system,
        test_callback_requests,
        test_notification_system
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            print()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            print()
    
    print("=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\n‚úÖ –ì–û–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò:")
        print("   ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤") 
        print("   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫")
        print("   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL")
        print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)")
        
        print("\n‚ö†Ô∏è  –î–õ–Ø –ü–û–õ–ù–û–ì–û –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –î–û–ë–ê–í–¨–¢–ï:")
        print("   ‚Ä¢ SENDGRID_API_KEY - –¥–ª—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("   ‚Ä¢ TELEGRAM_BOT_TOKEN - –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)